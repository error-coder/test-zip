# 매우 동의, 비동의 - 3점
# 동의, 비동의 - 2점
# 약간 동의, 비동의 - 1점
# 모르겠음 - 점수X
# 점수가 같으면 사전 순으로 빠른 성격 유형이 검사자 성격 유형
# 질문마다 판단하는 지표 - survey, 선택한 선택지를 담은 정수 배열 - choice
# 검사자의 성격 유형 검사 결과를 지표 번호 순서대로 return


# 1번 - 약간 동의 선택지 선택 - 네오형(N) 1점
# 2번 - 약간 비동의 - 콘형(C) - 1점
# 3번 - 비동의 선택 - 무지형(M) - 2점
# 4번 - 매우 동의 선택 - 튜브형(T) - 3점
# 5반 - 약간 동의 선택 - 어피치형(A) - 1점

# 1번지표 - 라이언형(R) : 0점, 튜브형(T) : 3점
# 2번지표 - 콘형(C) : 1점, 프로도형(F) : 0점
# 3번지표 - 제이지형(J) : 0점, 무지형(M) : 2점
# 4번지표 - 어피치형(A) : 1점, 네오형(N) : 1점
# 4번지표는 1점으로 동일하니 사전순으로 빼면 NA순으로 리턴

# 입출력 예 2번은 라이언형이 튜브형보다 점수가 더 높으므로 첫번째는 R
# 나머지는 모두 점수가 같으므로 사전순으로 빠른 걸 리턴 - C,J,A

from collections import defaultdict


def solution(survey, choices):
    result = ''
    elems = [['R','T'],['C','F'],['J','M'],['A','N']]
    score = {'R' : 0, 'T' : 0, 'C' : 0, 'F' : 0, 'J' : 0, 'H' : 0, 'A' : 0, 'N' : 0}
    
    # 점수를 종합하기 위해 dict자료형을 사용하고 들어있지 않은 값이면 0을 반환
    personality = defaultdict(int)
    
    for s,c in zip(survey, choices):
        if c < 4:
            personality[s[0]] += 4 - c
        else:
            personality[s[1]] += c - 4
    
    for i in elems:
        if personality[i[0]] >= personality[i[1]]:
            result += i[0]
        else:
            result += i[1]


    return result

# 카카오 풀이

# 해시나 배열을 이용하여 각 성격 유형별로 점수를 저장합니다.
# 해시나 조건문을 이용하여 각 설문지에서 선택한 대로 성격 유형에 점수를 부여합니다.
# 모든 문제에 대하여 각 성격 유형에 점수를 부여한 후, 적절한 for 문과 if 문으로 각 지표마다 어떤 성격 유형이 점수가 더 높은지 확인합니다.
# 점수가 같을 경우 사전순으로 빠른 성격 유형을 선택합니다.